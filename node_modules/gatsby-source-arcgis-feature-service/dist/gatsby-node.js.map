{"version":3,"file":"gatsby-node.js","sources":["../src/gatsby-node.js"],"sourcesContent":["import url from 'url'\nimport got from 'got'\nimport polylabel from 'polylabel'\nimport centroid from '@turf/centroid'\n\n// Default parameters for the ArcGIS feature service request: fetch all\n// features and fields in GeoJSON format.\nconst DEFAULT_PARAMS = {\n  f: 'geojson',\n  where: '1=1',\n  outFields: '*',\n}\n\n// ArcGIS feature service query endpoint path.\nconst URL_PATH = '0/query'\n\n// ArcGIS feature type name.\nconst FEATURE_TYPE = 'ArcGisFeature'\n\n// ArcGIS feature properties type name.\nconst FEATURE_PROPERTIES_TYPE = 'ArcGisFeatureProperties'\n\n// Precision to calculate polylabel coordinates.\nconst POLYLABEL_PRECISION = 0.1\n\nexport const sourceNodes = async (gatsbyContext, pluginOptions) => {\n  const { actions, createNodeId, createContentDigest } = gatsbyContext\n  const { createTypes, createNode } = actions\n  const { name, url: serverURL, params } = pluginOptions\n\n  const resolvedURL = url.resolve(serverURL, URL_PATH)\n  const response = await got(resolvedURL, {\n    responseType: 'json',\n    searchParams: { ...DEFAULT_PARAMS, ...params },\n  })\n\n  createTypes(`\n    \"A GeoJSON feature from an ArcGIS feature service.\"\n    type ${FEATURE_TYPE} implements Node @dontInfer {\n      \"The feature's ID within the ArcGIS feature service.\"\n      featureId: ID!\n\n      \"GeoJSON geometry data. Child fields do **not** need to be queried individually.\"\n      geometry: JSON\n\n      \"The center point within a feature.\"\n      centroid: [Float!]\n\n      \"If the feature is a Polygon, this is the optimal point within the polygon for a label.\"\n      polylabel: [Float!]\n\n      \"If the feature is a MultiPolygon, this is an array of center points within each polygon.\"\n      multiCentroids: [[Float!]]\n\n      \"If the feature is a MultiPolygon, this is an array of optimal points within each polygon for a label.\"\n      multiPolylabels: [[Float!]]\n\n      \"If provided in the plugin options, this is the name given to the plugin to categorize multiple feature services.\"\n      sourceName: String\n\n      \"The feature's GeoJSON type.\"\n      type: String!\n\n      \"The feature's GeoJSON type.\"\n      properties: ArcGisFeatureProperties @link\n    }\n  `)\n\n  // Implemented as a separate type because we want to infer this type.\n  createTypes(`\n    \"ArcGIS GeoJSON feature properties.\"\n    type ${FEATURE_PROPERTIES_TYPE} implements Node @infer {\n      \"If provided in the plugin options, this is the name given to the plugin to categorize multiple feature services.\"\n      sourceName: String\n    }\n  `)\n\n  // Create ArcGisFeature nodes for each feature.\n  response?.body?.features?.forEach?.(feature => {\n    const featureId = createNodeId(\n      [name, feature?.id].filter(Boolean).join(' '),\n    )\n    const propertiesId = createNodeId(\n      [name, feature?.id, 'properties'].filter(Boolean).join(' '),\n    )\n    const featureType = feature.geometry.type\n\n    const node = {\n      id: featureId,\n      featureId: feature?.id,\n      geometry: feature.geometry,\n      sourceName: name,\n      type: feature.type,\n      properties: propertiesId,\n      centroid: centroid(feature.geometry).geometry.coordinates,\n      internal: {\n        type: FEATURE_TYPE,\n        contentDigest: createContentDigest(feature),\n      },\n    }\n\n    if (featureType === 'Polygon')\n      node.polylabel = polylabel(\n        feature.geometry.coordinates,\n        POLYLABEL_PRECISION,\n      )\n\n    if (featureType === 'MultiPolygon') {\n      node.multiPolylabels = feature.geometry.coordinates.map(coordinates =>\n        polylabel(coordinates, POLYLABEL_PRECISION),\n      )\n\n      node.multiCentroid = feature.geometry.coordinates.map(\n        coordinates =>\n          centroid({ type: 'Polygon', coordinates }).geometry.coordinates,\n      )\n    }\n\n    createNode(node)\n\n    createNode({\n      ...feature.properties,\n      id: propertiesId,\n      sourceName: name,\n      internal: {\n        type: FEATURE_PROPERTIES_TYPE,\n        contentDigest: createContentDigest(feature.properties),\n      },\n    })\n  })\n}\n"],"names":["DEFAULT_PARAMS","f","where","outFields","URL_PATH","FEATURE_TYPE","FEATURE_PROPERTIES_TYPE","POLYLABEL_PRECISION","sourceNodes","gatsbyContext","pluginOptions","actions","createNodeId","createContentDigest","createTypes","createNode","name","url","serverURL","params","resolvedURL","resolve","response","got","responseType","searchParams","body","features","forEach","feature","featureId","id","filter","Boolean","join","propertiesId","featureType","geometry","type","node","sourceName","properties","centroid","coordinates","internal","contentDigest","polylabel","multiPolylabels","map","multiCentroid"],"mappings":";;;;;;;;;;;AAMA;;AACA,MAAMA,cAAc,GAAG;EACrBC,CAAC,EAAE,SADkB;EAErBC,KAAK,EAAE,KAFc;EAGrBC,SAAS,EAAE;CAHb;;AAOA,MAAMC,QAAQ,GAAG,SAAjB;;AAGA,MAAMC,YAAY,GAAG,eAArB;;AAGA,MAAMC,uBAAuB,GAAG,yBAAhC;;AAGA,MAAMC,mBAAmB,GAAG,GAA5B;AAEA,MAAaC,WAAW,GAAG,OAAOC,aAAP,EAAsBC,aAAtB,KAAwC;;;QAC3D;IAAEC,OAAF;IAAWC,YAAX;IAAyBC;MAAwBJ,aAAvD;QACM;IAAEK,WAAF;IAAeC;MAAeJ,OAApC;QACM;IAAEK,IAAF;IAAQC,GAAG,EAAEC,SAAb;IAAwBC;MAAWT,aAAzC;QAEMU,WAAW,GAAGH,GAAG,CAACI,OAAJ,CAAYH,SAAZ,EAAuBd,QAAvB,CAApB;QACMkB,QAAQ,GAAG,MAAMC,GAAG,CAACH,WAAD,EAAc;IACtCI,YAAY,EAAE,MADwB;IAEtCC,YAAY,EAAE,EAAE,GAAGzB,cAAL;SAAwBmB;;GAFd,CAA1B;EAKAL,WAAW,CAAE;;WAEJT,YAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAFX,CAAX,CAXiE;;EA4CjES,WAAW,CAAE;;WAEJR,uBAAwB;;;;GAFtB,CAAX,CA5CiE;;EAqDjEgB,QAAQ,SAAR,IAAAA,QAAQ,WAAR,8BAAAA,QAAQ,CAAEI,IAAV,2FAAgBC,QAAhB,0GAA0BC,OAA1B,8GAAoCC,OAAO,IAAI;UACvCC,SAAS,GAAGlB,YAAY,CAC5B,CAACI,IAAD,EAAOa,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEE,EAAhB,EAAoBC,MAApB,CAA2BC,OAA3B,EAAoCC,IAApC,CAAyC,GAAzC,CAD4B,CAA9B;UAGMC,YAAY,GAAGvB,YAAY,CAC/B,CAACI,IAAD,EAAOa,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEE,EAAhB,EAAoB,YAApB,EAAkCC,MAAlC,CAAyCC,OAAzC,EAAkDC,IAAlD,CAAuD,GAAvD,CAD+B,CAAjC;UAGME,WAAW,GAAGP,OAAO,CAACQ,QAAR,CAAiBC,IAArC;UAEMC,IAAI,GAAG;MACXR,EAAE,EAAED,SADO;MAEXA,SAAS,EAAED,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE,EAFT;MAGXM,QAAQ,EAAER,OAAO,CAACQ,QAHP;MAIXG,UAAU,EAAExB,IAJD;MAKXsB,IAAI,EAAET,OAAO,CAACS,IALH;MAMXG,UAAU,EAAEN,YAND;MAOXO,QAAQ,EAAEA,QAAQ,CAACb,OAAO,CAACQ,QAAT,CAAR,CAA2BA,QAA3B,CAAoCM,WAPnC;MAQXC,QAAQ,EAAE;QACRN,IAAI,EAAEjC,YADE;QAERwC,aAAa,EAAEhC,mBAAmB,CAACgB,OAAD;;KAVtC;QAcIO,WAAW,KAAK,SAApB,EACEG,IAAI,CAACO,SAAL,GAAiBA,SAAS,CACxBjB,OAAO,CAACQ,QAAR,CAAiBM,WADO,EAExBpC,mBAFwB,CAA1B;;QAKE6B,WAAW,KAAK,cAApB,EAAoC;MAClCG,IAAI,CAACQ,eAAL,GAAuBlB,OAAO,CAACQ,QAAR,CAAiBM,WAAjB,CAA6BK,GAA7B,CAAiCL,WAAW,IACjEG,SAAS,CAACH,WAAD,EAAcpC,mBAAd,CADY,CAAvB;MAIAgC,IAAI,CAACU,aAAL,GAAqBpB,OAAO,CAACQ,QAAR,CAAiBM,WAAjB,CAA6BK,GAA7B,CACnBL,WAAW,IACTD,QAAQ,CAAC;QAAEJ,IAAI,EAAE,SAAR;QAAmBK;OAApB,CAAR,CAA2CN,QAA3C,CAAoDM,WAFnC,CAArB;;;IAMF5B,UAAU,CAACwB,IAAD,CAAV;IAEAxB,UAAU,CAAC,EACT,GAAGc,OAAO,CAACY,UADF;MAETV,EAAE,EAAEI,YAFK;MAGTK,UAAU,EAAExB,IAHH;MAIT4B,QAAQ,EAAE;QACRN,IAAI,EAAEhC,uBADE;QAERuC,aAAa,EAAEhC,mBAAmB,CAACgB,OAAO,CAACY,UAAT;;KAN5B,CAAV;GA1CF;CArDK;;;;"}